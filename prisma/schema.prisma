generator client {
    provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Add this for better performance
}

model User {
    id                 String               @id @unique @default(cuid())
    createdAt          DateTime             @default(now())
    updatedAt          DateTime             @updatedAt
    email              String               @unique
    firstName          String?
    userName           String?
    fullName           String?
    imageUrl           String?
    accountNumber      String?
    accountName        String?
    bankName           String?
    role               UserRole             @default(user)
    investments        Investment[]
    transactionHistory TransactionHistory[]
    userTracker        UserTracker?
    withdrawals        Withdrawal[]
    referredUsers      User[]               @relation("ReferredBy")
    referredBy         User?                @relation("ReferredBy", fields: [referredById], references: [id])
    referredById       String?              @unique
}

enum UserRole {
    user
    admin
}

model UserTracker {
    id                  String   @id @unique @default(cuid())
    user                User     @relation(fields: [userId], references: [id])
    userId              String   @unique
    lastProfitUpdate    DateTime @default(now())
    lastWithdrawal      DateTime
    totalProfit         Float    @default(0)
    totalWithdrawal     Float    @default(0)
    balance             Float    @default(0)
    withdrawableBalance Float    @default(0)
}

model InvestmentPlan {
    id                String             @id @unique @default(cuid())
    name              InvestmentPlanName @unique
    totalProfit       Float
        priceRange         String?
    affiliate          String?   
    price             Float
    duration          Int
    profitPercent     Float
    rating            Int
    periodicProfit    Float
    dailyProfit       Float
    principalReturn   Boolean
    principalWithdraw Boolean
    creditAmount      Float
    depositFee        String
    debitAmount       Float
    durationDays      Int
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    investments       Investment[]
}

enum InvestmentPlanName {
BASIC_PLAN
SILVER_PLAN
GOLDEN_PLAN
AMBASSADORSHIP_PLAN
PLATINUM_PLAN
VIP_PLAN
REAL_ESTATE_PLAN
MINING_PLAN
PERSONAL_LOAN_PACKAGE
BUSINESS_LOAN_PACKAGE
MORTGAGE_LOAN_PACKAGE
}

enum Wallets {
    BTC
    DOGE
    BCH
    LTC
    ETH
    USDT
    TRX
}

model Investment {
    id                  String               @id @unique @default(cuid())
    createdAt           DateTime             @default(now())
    updatedAt           DateTime             @updatedAt
    userId              String
    startIncrease       Boolean              @default(false)
    dateToStartIncrease DateTime?
    transactionId       String
    name                String
    email               String
    walletPaidInto      Wallets
    user                User                 @relation(fields: [userId], references: [id])
    status              InvestmentStatus?
    imageProofUrl       ImageProof[]
    planId              String
    plan                InvestmentPlan       @relation(fields: [planId], references: [id])
    transactionHistory  TransactionHistory[]
    investmentTracker   InvestmentTracker?
}

model InvestmentTracker {
    id               String     @id @unique @default(cuid())
    investment       Investment @relation(fields: [investmentId], references: [id])
    investmentId     String     @unique
    lastProfitUpdate DateTime   @default(now())
    totalProfit      Float      @default(0)
}

model ImageProof {
    id        String     @id @unique
    url       String
    productId String
    product   Investment @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model InvestmentStatus {
    id           String               @id @unique @default(cuid())
    status       InvestmentStatusEnum
    investmentId String               @unique
    investment   Investment           @relation(fields: [investmentId], references: [id])
    createdAt    DateTime             @default(now())
    updatedAt    DateTime             @updatedAt
}

model TransactionHistory {
    id           String          @id @unique @default(cuid())
    type         TransactionType
    amount       Float
    description  String
    userId       String
    user         User            @relation(fields: [userId], references: [id])
    investmentId String?
    investment   Investment?     @relation(fields: [investmentId], references: [id])
    createdAt    DateTime        @default(now())
    updatedAt    DateTime        @updatedAt
}

model Withdrawal {
    id            String           @id @unique @default(cuid())
    userId        String
    user          User             @relation(fields: [userId], references: [id])
    amount        Float
    status        WithdrawalStatus
    walletAddress String
    cryptoType    Wallets
    createdAt     DateTime         @default(now())
    updatedAt     DateTime         @updatedAt
}

enum InvestmentStatusEnum {
    PAYMENT_MADE
    NOT_CONFIRMED
    CONFIRMED
    SOLD
}

enum TransactionType {
    DEPOSIT
    WITHDRAWAL
    NEUTRAL
}

enum WithdrawalStatus {
    UNCONFIRMED
    CONFIRMED
}